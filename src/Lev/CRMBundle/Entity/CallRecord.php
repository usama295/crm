<?php

namespace App\Lev\CRMBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Sale Entity
 *
 * @ORM\Entity
 * @ORM\Table(name="twilio_call_record")
 * @ORM\HasLifecycleCallbacks
 * @see https://www.twilio.com/docs/api/rest/making-calls#status-callback-parameter
 * @category Entity
 * @package  App\Lev\CRMBundle\Entity
 * @author   Rafael Goulart <rafaelgou@gmail.com>
 * @license  Private <http://none.de>
 * @link     none
 */
class CallRecord
{
    use Traits\BlameableCreateEntity;

    /**
     * @ORM\Column(name="id", type="integer", nullable=false)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    protected $id;

    /**
     * @ORM\ManyToOne(targetEntity="App\Lev\CRMBundle\Entity\Office")
     * @ORM\JoinColumn(name="office_id", referencedColumnName="id", nullable=false)
     * @Assert\NotBlank(message="Required")
     **/
    protected $office;

    /**
     * @ORM\ManyToOne(targetEntity="App\Lev\CRMBundle\Entity\Customer")
     * @ORM\JoinColumn(name="customer_id", referencedColumnName="id", nullable=false)
     * @Assert\NotBlank(message="Required")
     **/
    protected $customer;

    /**
     * @ORM\ManyToOne(targetEntity="App\Lev\CRMBundle\Entity\Appointment", inversedBy="call")
     * @ORM\JoinColumn(name="appointment_id", referencedColumnName="id", nullable=true)
     **/
    protected $appointment;

    /**
     * CallSid
     *
     * A unique identifier for this call, generated by Twilio.
     *
     * @ORM\Column(name="call_sid", type="string",length=50, nullable=false)
     * @Assert\Length(max=50, maxMessage="Recording URL length must be 50 chars max.")
     */
    protected $callSid;

    /**
     * From
     *
     * The phone number or client identifier of the party that initiated the call.
     * Phone numbers are formatted with a '+' and country code, e.g. +16175551212 (E.164 format).
     * Client identifiers begin with the client: URI scheme;
     * for example, for a call from a client named 'tommy',
     * the From parameter will be client:tommy.
     *
     * @ORM\Column(name="from_number", type="string",length=100, nullable=false)
     * @Assert\Length(max=100, maxMessage="Recording URL length must be 100 chars max.")
     */
    protected $fromNumber;

    /**
     * From
     *
     * The phone number or client identifier of the called party. Phone numbers are formatted with a '+' and country code, e.g. +16175551212 (E.164 format). Client identifiers begin with the client: URI scheme; for example, for a call to a client named 'jenny', the To parameter will be client:jenny.
     *
     * @ORM\Column(name="to_number", type="string",length=100, nullable=false)
     * @Assert\Length(max=100, maxMessage="Recording URL length must be 100 chars max.")
     */
    protected $toNumber;

    /**
     * CallStatus
     *
     * A descriptive status for the call.
     * The value is one of queued, initiated, ringing, in-progress, busy, failed, or no-answer
     * @ORM\Column(name="callstatus", type="string", length=15, nullable=false)
     * @Assert\Choice(
     *   choices = {"queued", "initiated", "ringing", "in-progress", "busy", "failed", "no-answer"},
     *   message = "Invalid status."
     * )
     * @Assert\NotBlank(message="Call status is required")
     * @Assert\Length(max=15)
     */
    protected $callStatus;

    /**
     * RecordingUrl
     *
     * The URL of the phone call's recorded audio.
     * This parameter is included only if Record=true is set on the REST API
     * request and does not include recordings from <Dial> or <Record>.
     * RecordingUrl is only present in the completed event.
     *
     * @ORM\Column(name="recording_url", type="string",length=1000, nullable=true)
     * @Assert\Length(max=1000, maxMessage="Recording URL length must be 1000 chars max.")
     */
    protected $recordingUrl;

    /**
     * RecordingSid
     *
     * The unique ID of the Recording from this call.
     * RecordingSid is only present in the completed event.
     *
     * @ORM\Column(name="recording_sid", type="string",length=34, nullable=true)
     * @Assert\Length(max=34, maxMessage="Recording URL length must be 34 chars max.")
     */
    protected $recordingSid;

    /**
     * RecordingDuration
     *
     * The duration of the recorded audio (in seconds).
     * RecordingDuration is only present in the completed event.
     *
     * @ORM\Column(name="recording_duration", type="integer", nullable=true)
     */
    protected $recordingDuration;

    /**
     * Timestamp
     *
     * The timestamp when the event was fired, given as UTC in RFC 2822 format.
     *
     * @ORM\Column(name="timestamp", type="datetime", nullable=true)
     */
    protected $timestamp;

    /**
     * CallbackSource
     *
     * A string that describes the source of the webhook.
     * This is provided to help disambiguate why the webhook was made.
     * On Status Callbacks, this value is always call-progress-events.
     *
     * @ORM\Column(name="callback_source", type="string",length=50, nullable=true)
     * @Assert\Length(max=50, maxMessage="Callback Source length must be 50 chars max.")
     */
    protected $callbackSource;

    /**
     * SequenceNumber
     *
     * The order in which the events were fired, starting from 0.
     * Although events are fired in order, they are made as separate
     * HTTP requests and there is no guarantee they will arrive
     * in the same order.
     *
     * @ORM\Column(name="sequence_number", type="integer", nullable=true)
     */
    protected $sequenceNumber;

    /**
     * To Array
     * @return array
     */
    public function toArray()
    {
        return array(
            'id'                => $this->getId(),
            'customer'          => $this->getCustomer() ? $this->getCustomer()->toArrayShort() : null,
            'customerID'        => $this->getCustomer() ? $this->getCustomer()->getId() : null,
            'appointment'       => $this->getAppointment() ? $this->getAppointment()->toArrayShort() : null,
            'appointmentID'     => $this->getAppointment() ? $this->getAppointment()->getId() : null,
            'callSid'           => $this->getCallSid(),
            'fromNumber'        => $this->getFromNumber(),
            'toNumber'          => $this->getToNumber(),
            'callStatus'        => $this->getCallStatus(),
            'recordingUrl'      => $this->getRecordingUrl(),
            'recordingSid'      => $this->getRecordingSid(),
            'recordingDuration' => $this->getRecordingDuration(),
            'timestamp'         => $this->getTimestamp(),
            'callbackSource'    => $this->getCallbackSource(),
            'sequenceNumber'    => $this->getSequenceNumber(),
            'createdAt'         => $this->getCreatedAt(),
            'createdBy'         => $this->getCreatedBy() ? $this->getCreatedBy()->toArrayShort() : null,
        );
    }

    /**
     * To Array
     * @return array
     */
    public function toArrayToAppointments()
    {
        return array(
            'id'            => $this->getId(),
            'createdAt'     => $this->getCreatedAt(),
            'createdBy'     => $this->getCreatedBy() ? $this->getCreatedBy()->toArrayShort() : null,
        );
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set callStatus
     *
     * @param string $callStatus
     *
     * @return CallRecord
     */
    public function setCallStatus($callStatus)
    {
        $this->callStatus = $callStatus;

        return $this;
    }

    /**
     * Get callStatus
     *
     * @return string
     */
    public function getCallStatus()
    {
        return $this->callStatus;
    }

    /**
     * Set recordingUrl
     *
     * @param string $recordingUrl
     *
     * @return CallRecord
     */
    public function setRecordingUrl($recordingUrl)
    {
        $this->recordingUrl = $recordingUrl;

        return $this;
    }

    /**
     * Get recordingUrl
     *
     * @return string
     */
    public function getRecordingUrl()
    {
        return $this->recordingUrl;
    }

    /**
     * Set recordingSid
     *
     * @param string $recordingSid
     *
     * @return CallRecord
     */
    public function setRecordingSid($recordingSid)
    {
        $this->recordingSid = $recordingSid;

        return $this;
    }

    /**
     * Get recordingSid
     *
     * @return string
     */
    public function getRecordingSid()
    {
        return $this->recordingSid;
    }

    /**
     * Set recordingDuration
     *
     * @param integer $recordingDuration
     *
     * @return CallRecord
     */
    public function setRecordingDuration($recordingDuration)
    {
        $this->recordingDuration = $recordingDuration;

        return $this;
    }

    /**
     * Get recordingDuration
     *
     * @return integer
     */
    public function getRecordingDuration()
    {
        return $this->recordingDuration;
    }

    /**
     * Set timestamp
     *
     * @param \DateTime $timestamp
     *
     * @return CallRecord
     */
    public function setTimestamp($timestamp)
    {
        $this->timestamp = $timestamp;

        return $this;
    }

    /**
     * Get timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * Set callbackSource
     *
     * @param string $callbackSource
     *
     * @return CallRecord
     */
    public function setCallbackSource($callbackSource)
    {
        $this->callbackSource = $callbackSource;

        return $this;
    }

    /**
     * Get callbackSource
     *
     * @return string
     */
    public function getCallbackSource()
    {
        return $this->callbackSource;
    }

    /**
     * Set sequenceNumber
     *
     * @param integer $sequenceNumber
     *
     * @return CallRecord
     */
    public function setSequenceNumber($sequenceNumber)
    {
        $this->sequenceNumber = $sequenceNumber;

        return $this;
    }

    /**
     * Get sequenceNumber
     *
     * @return integer
     */
    public function getSequenceNumber()
    {
        return $this->sequenceNumber;
    }

    /**
     * Set office
     *
     * @param \App\Lev\CRMBundle\Entity\Office $office
     *
     * @return CallRecord
     */
    public function setOffice(\App\Lev\CRMBundle\Entity\Office $office)
    {
        $this->office = $office;

        return $this;
    }

    /**
     * Get office
     *
     * @return \App\Lev\CRMBundle\Entity\Office
     */
    public function getOffice()
    {
        return $this->office;
    }

    /**
     * Set customer
     *
     * @param \App\Lev\CRMBundle\Entity\Customer $customer
     *
     * @return CallRecord
     */
    public function setCustomer(\App\Lev\CRMBundle\Entity\Customer $customer)
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * Get customer
     *
     * @return \App\Lev\CRMBundle\Entity\Customer
     */
    public function getCustomer()
    {
        return $this->customer;
    }

    /**
     * Set appointment
     *
     * @param \App\Lev\CRMBundle\Entity\Appointment $appointment
     *
     * @return CallRecord
     */
    public function setAppointment(\App\Lev\CRMBundle\Entity\Appointment $appointment = null)
    {
        $this->appointment = $appointment;

        return $this;
    }

    /**
     * Get appointment
     *
     * @return \App\Lev\CRMBundle\Entity\Appointment
     */
    public function getAppointment()
    {
        return $this->appointment;
    }

    /**
     * Set callSid
     *
     * @param string $callSid
     *
     * @return CallRecord
     */
    public function setCallSid($callSid)
    {
        $this->callSid = $callSid;

        return $this;
    }

    /**
     * Get callSid
     *
     * @return string
     */
    public function getCallSid()
    {
        return $this->callSid;
    }

    /**
     * Set fromNumber
     *
     * @param string $fromNumber
     *
     * @return CallRecord
     */
    public function setFromNumber($fromNumber)
    {
        $this->fromNumber = $fromNumber;

        return $this;
    }

    /**
     * Get fromNumber
     *
     * @return string
     */
    public function getFromNumber()
    {
        return $this->fromNumber;
    }

    /**
     * Set toNumber
     *
     * @param string $toNumber
     *
     * @return CallRecord
     */
    public function setToNumber($toNumber)
    {
        $this->toNumber = $toNumber;

        return $this;
    }

    /**
     * Get toNumber
     *
     * @return string
     */
    public function getToNumber()
    {
        return $this->toNumber;
    }
}
